This project was a culmination of the past few weeks of class. It built upon our previous project, which for me proved to be a source of difficulty. Although I had received 100% on my previous project, there were a lot of kinks that I had to work out before I could really even begin working on this one. 
One of the issues that still remain in my code is the fact that the scheduler seems to not operate properly under certain conditions. For example, in the test code that we were given, test 6 times out for me when it enters a part where sleep(1) is called three times consecutively. What is supposed to happen here is the alarm that I set is supposed to interrupt the sleep function. Instead it is allowed to run to completion. This could be due to issues with my lock() or unlock() functions, although everything looks sound there. It could also be an issue with my semaphore functions. 
The biggest issue that I faced from a software development standpoint was self-imposed. I failed to look forward enough to lay a good foundation on which to build. An example of this is the way that I implemented my linked list. In project 2, I implemented the list as a simple queue with a head and a tail and single-direction access. In this project, I had the idea to make it into a circular linked list, so that moving forward a lot of steps would be more efficient (I wouldn't have to go through the push/pop process each time, instead just moving pointers). The issue is that I didn't realize that in the semaphore implementation, it made sense to use a linked list. But a circular one was unnecessary. So I ended up making a regular linked list/queue for that part. The end result is messy code that has a lot of reduntant parts and is also very difficult to add to and read. I took way too much time just trying to figure out my own code, rather than being productive. 
Overall, though, the project was interesting and I certainly learned a lot. My code passed all of the test cases, but only when I increased the timeout time. 



